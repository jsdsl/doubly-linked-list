{"version":3,"sources":["ts/tests/doubly-linked-list.test.ts"],"names":["doubly_linked_list_1","require","doubly_linked_list_node_1","describe","test","dll","DoublyLinkedList","expect","toBeDefined","elements","beforeEach","getFirst","toBe","getFirstNode","toBeInstanceOf","DoublyLinkedListNode","getLast","getLastNode","fail","get","toThrowError","RangeError","length","size","element","contains","toBeTruthy","toBeFalsy","toArray","toStrictEqual"],"mappings":"oEAMA,MAAAA,qBAAAC,QAAA,yBACAC,0BAAAD,QAAA,8BAUAE,SAAS,uBAAwB,KAEhCC,KAAK,wBAAyB,KAE7B,IAAIC,EAA6B,IAAIL,qBAAAM,iBAErCC,OAAOF,GAAKG,gBAIbJ,KAAK,gCAAiC,KAErC,IAAIC,EAAgC,IAAIL,qBAAAM,iBAAyB,IAAK,IAAK,KAE3EC,OAAOF,GAAKG,kBAMdL,SAAS,mBAAoB,KAE5B,IAAIE,EACAI,EAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,KAE9CC,WAAW,KAEVL,EAAM,IAAIL,qBAAAM,oBAA4BG,KAIvCL,KAAK,YAAa,KAEjBG,OAAOF,EAAIM,YAAYC,KAAK,OAI7BR,KAAK,gBAAiB,KAGrBG,OAAOF,EAAIQ,gBAAgBC,eAAeZ,0BAAAa,wBAK3CX,KAAK,WAAY,KAEhBG,OAAOF,EAAIW,WAAWJ,KAAK,OAI5BR,KAAK,eAAgB,KAGpBG,OAAOF,EAAIY,eAAeH,eAAeZ,0BAAAa,wBAK1CZ,SAAS,eAAgB,KAExBC,KAAK,wBAAyB,QAO9BA,KAAK,uBAAwB,UAS9BA,KAAK,eAAgB,KAEpBc,KAAK,6BAINd,KAAK,mBAAoB,KAExBc,KAAK,6BAINd,KAAK,mBAAoB,KAExBc,KAAK,6BAINd,KAAK,eAAgB,KAEpBc,KAAK,6BAINd,KAAK,mBAAoB,KAExBc,KAAK,6BAINd,KAAK,gBAAiB,KAErBc,KAAK,6BAINd,KAAK,oBAAqB,KAEzBc,KAAK,6BAINd,KAAK,eAAgB,KAEpBc,KAAK,6BAINd,KAAK,mBAAoB,KAExBc,KAAK,6BAINd,KAAK,cAAe,KAEnBc,KAAK,6BAINd,KAAK,kBAAmB,KAEvBc,KAAK,6BAINd,KAAK,eAAgB,KAEpBc,KAAK,6BAINd,KAAK,mBAAoB,KAExBc,KAAK,6BAINd,KAAK,cAAe,KAEnBc,KAAK,6BAINd,KAAK,kBAAmB,KAEvBc,KAAK,6BAINd,KAAK,cAAe,KAEnBc,KAAK,6BAINd,KAAK,OAAQ,KAEZc,KAAK,6BAINf,SAAS,OAAQ,KAEhBC,KAAK,kBAAmB,KAEvBG,OAAOF,EAAIc,IAAI,IAAIP,KAAK,KACxBL,OAAOF,EAAIc,IAAI,IAAIP,KAAK,KACxBL,OAAOF,EAAIc,IAAI,IAAIP,KAAK,KACxBL,OAAOF,EAAIc,IAAI,IAAIP,KAAK,KACxBL,OAAOF,EAAIc,IAAI,IAAIP,KAAK,OAIzBR,KAAK,0CAA2C,KAE/CG,OAAO,IAAMF,EAAIc,KAAK,IAAIC,aAAaC,cAIxCjB,KAAK,0CAA2C,KAE/CG,OAAO,IAAMF,EAAIc,IAAIV,EAASa,SAASF,aAAaC,gBAMtDjB,KAAK,QAAS,KAEbG,OAAOF,EAAIkB,QAAQX,KAAKH,EAASa,UAIlCnB,SAAS,YAAa,KAErBC,KAAK,iBAAkB,KAEtB,IAAK,IAAIoB,KAAWf,EAAUF,OAAOF,EAAIoB,SAASD,IAAUE,eAI7DtB,KAAK,gBAAiB,KAErB,IAAK,IAAIoB,IAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAMjB,OAAOF,EAAIoB,SAASD,IAAUG,gBAMpFvB,KAAK,WAAY,KAEhBc,KAAK,6BAINd,KAAK,UAAW,KAEfc,KAAK,6BAINd,KAAK,SAAU,KAEdc,KAAK,6BAINd,KAAK,gBAAiB,KAErBc,KAAK,6BAINd,KAAK,YAAa,KAEjBc,KAAK,6BAINd,KAAK,WAAY,KAEhBc,KAAK,6BAINd,KAAK,WAAY,KAEhBG,OAAOF,EAAIuB,WAAWC,cAAc,CAAC,IAAK,IAAK,IAAK,IAAK","file":"doubly-linked-list.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t10:33 PM -- July 18th, 2019.\n *\tProject: @jsdsl/doubly-linked-list\n */\n\nimport { DoublyLinkedList } from \"../doubly-linked-list\";\nimport { DoublyLinkedListNode } from \"../doubly-linked-list-node\";\n\n/**\n *\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\n\ndescribe(\"Initialization Tests\", () => {\n\t\n\ttest(\"Basic initialization.\", () => {\n\t\t\n\t\tlet dll: DoublyLinkedList<any> = new DoublyLinkedList<any>();\n\t\t\n\t\texpect(dll).toBeDefined();\n\t\t\n\t});\n\t\n\ttest(\"Initialization with elements.\", () => {\n\t\t\n\t\tlet dll: DoublyLinkedList<string> = new DoublyLinkedList<string>(\"a\", \"b\", \"c\");\n\t\t\n\t\texpect(dll).toBeDefined();\n\t\t\n\t});\n\t\n});\n\ndescribe(\"Per-method Tests\", () => {\n\t\n\tlet dll: DoublyLinkedList<string>;\n\tlet elements: string[] = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n\t\n\tbeforeEach(() => {\n\t\t\n\t\tdll = new DoublyLinkedList<string>(...elements);\n\t\t\n\t});\n\t\n\ttest(\"#getFirst\", () => {\n\t\t\n\t\texpect(dll.getFirst()).toBe(\"a\");\n\t\t\n\t});\n\t\n\ttest(\"#getFirstNode\", () => {\n\t\t\n\t\t// FIX-ME [10/2/19 @ 12:56 AM] - Fix this test.\n\t\texpect(dll.getFirstNode()).toBeInstanceOf(DoublyLinkedListNode);\n\t\t// expect(dll.getFirstNode().getElement()).toBe(\"a\");\n\t\t\n\t});\n\t\n\ttest(\"#getLast\", () => {\n\t\t\n\t\texpect(dll.getLast()).toBe(\"e\");\n\t\t\n\t});\n\t\n\ttest(\"#getLastNode\", () => {\n\t\t\n\t\t// FIX-ME [10/2/19 @ 12:56 AM] - Fix this test.\n\t\texpect(dll.getLastNode()).toBeInstanceOf(DoublyLinkedListNode);\n\t\t// expect(dll.getLastNode().getElement()).toBe(\"e\");\n\t\t\n\t});\n\t\n\tdescribe(\"#hasNextNode\", () => {\n\t\t\n\t\ttest(\"Called on first node.\", () => {\n\t\t\t\n\t\t\t// FIX-ME [10/2/19 @ 12:55 AM] - Fix this test.\n\t\t\t// expect(dll.hasNextNode(dll.getFirstNode())).toBeTruthy();\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Called on last node.\", () => {\n\t\t\t\n\t\t\t// FIX-ME [10/2/19 @ 12:55 AM] - Fix this test.\n\t\t\t// expect(dll.hasNextNode(dll.getLastNode())).toBeFalsy();\n\t\t\t\n\t\t});\n\t\t\n\t});\n\t\n\ttest(\"#getNextNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#hasPreviousNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#getPreviousNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertAfter\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertNodeAfter\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertBefore\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertNodeBefore\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertFirst\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertNodeFirst\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertLast\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#insertNodeLast\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#removeFirst\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#removeFirstNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#removeLast\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#removeLastNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#removeNode\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#add\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\tdescribe(\"#get\", () => {\n\t\t\n\t\ttest(\"Get each index.\", () => {\n\t\t\t\n\t\t\texpect(dll.get(0)).toBe(\"a\");\n\t\t\texpect(dll.get(1)).toBe(\"b\");\n\t\t\texpect(dll.get(2)).toBe(\"c\");\n\t\t\texpect(dll.get(3)).toBe(\"d\");\n\t\t\texpect(dll.get(4)).toBe(\"e\");\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Get out-of-bounds index (under bounds).\", () => {\n\t\t\t\n\t\t\texpect(() => dll.get(-1)).toThrowError(RangeError);\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Get out-of-bounds index (above bounds).\", () => {\n\t\t\t\n\t\t\texpect(() => dll.get(elements.length)).toThrowError(RangeError);\n\t\t\t\n\t\t});\n\t\t\n\t});\n\t\n\ttest(\"#size\", () => {\n\t\t\n\t\texpect(dll.size()).toBe(elements.length);\n\t\t\n\t});\n\t\n\tdescribe(\"#contains\", () => {\n\t\t\n\t\ttest(\"Truthy checks.\", () => {\n\t\t\t\n\t\t\tfor (let element of elements) expect(dll.contains(element)).toBeTruthy();\n\t\t\t\n\t\t});\n\t\t\n\t\ttest(\"Falsy checks.\", () => {\n\t\t\t\n\t\t\tfor (let element of [\"1\", \"2\", \"3\", \"x\", \"y\", \"z\"]) expect(dll.contains(element)).toBeFalsy();\n\t\t\t\n\t\t});\n\t\t\n\t});\n\t\n\ttest(\"#isEmpty\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#remove\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#clear\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#nodeIterator\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#iterator\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#shuffle\", () => {\n\t\t\n\t\tfail(\"Test not yet written...\");\n\t\t\n\t});\n\t\n\ttest(\"#toArray\", () => {\n\t\t\n\t\texpect(dll.toArray()).toStrictEqual([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\t\t\n\t});\n\t\n});"]}