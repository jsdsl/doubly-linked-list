{"version":3,"sources":["../ts/doubly-linked-list.ts"],"names":["abstract_list_1","require","doubly_linked_list_node_1","iter_over_1","DoublyLinkedList","AbstractList","[object Object]","elements","super","this","prologue","DoublyLinkedListNode","undefined","epilogue","setNextNode","addAll","content","previousNode","nextNode","getNextNode","getPreviousNode","newNode","setPreviousNode","Error","centerNode","hasPreviousNode","hasNextNode","isEmpty","getFirstNode","getElement","getPrologueNode","getLastNode","getEpilogueNode","node","getParentList","element","insertBetween","afterNode","insertNodeBetween","beforeNode","insertAfter","insertNodeAfter","insertBefore","insertNodeBefore","removeFirstNode","removeNode","removeLastNode","displaced","insertLast","index","iterator","i","hasNext","next","size","nodeIterator","forEachRemaining","searchElement","AbstractIterator","dll","firstNode","currentNode","removedNode","iterations","count","toArray","clear","length","random","Math","floor","splice","add","result","push","exports"],"mappings":"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","file":"doubly-linked-list.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:54 PM -- March 14th, 2019.\n *\tProject: @jsdsl/doubly-linked-list\n */\n\nimport { AbstractList } from \"@jsdsl/abstract-list\";\nimport { DoublyLinkedListNode } from \"./doubly-linked-list-node\";\nimport { AbstractIterator } from \"iter-over\";\nimport { IDoublyLinkedList } from \"./i-doubly-linked-list\";\n\n/**\n * A list-type data structure consisting of an ordered collection of nodes that rely on node-to-node linkages to\n * maintain the internal structure of the list.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.2.0\n * @since v0.1.0\n */\nexport class DoublyLinkedList<E = any> extends AbstractList<E> implements IDoublyLinkedList<E> {\n\t\n\t/**\n\t * The 'prologue' node of this list - the node that occurs before all other nodes.\n\t * \n\t * Note that this node is purely used to maintain the internal structure of this list, and cannot be accessed in any\n\t * way outside of the scope of this class.\n\t */\n\tprivate prologue: DoublyLinkedListNode<E>;\n\t\n\t/**\n\t * The 'epilogue' node of this list - the node that occurs after all other nodes.\n\t * \n\t * Note that this node is purely used to maintain the internal structure of this list, and cannot be accessed in any\n\t * way outside of the scope of this class.\n\t */\n\tprivate epilogue: DoublyLinkedListNode<E>;\n\t\n\t/**\n\t * Initializes a new DoublyLinkedList with the specified elements.\n\t * \n\t * @param elements The elements to add to the list.\n\t */\n\tpublic constructor(...elements: E[]) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.prologue = new DoublyLinkedListNode<E>(null, this, undefined, undefined);\n\t\tthis.epilogue = new DoublyLinkedListNode<E>(null, this, this.prologue, undefined);\n\t\tthis.prologue.setNextNode(this.epilogue);\n\t\t\n\t\tthis.addAll(elements);\n\t\n\t}\n\t\n\t/**\n\t * Returns the epilogue node of this list.\n\t * \n\t * @return The epilogue node of this list.\n\t */\n\tprotected getEpilogueNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.epilogue;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the prologue node of this list.\n\t *\n\t * @return The prologue node of this list.\n\t */\n\tprotected getPrologueNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.prologue;\n\t\t\n\t}\n\t\n\t/**\n\t * Creates a new node with the provided content and inserts it between some specified preceding and successive\n\t * nodes, returning the newly created middle node.\n\t * \n\t * Note that this method will throw an error if, prior to this method's operation, the specified preceding and\n\t * successive nodes are not adjacent.\n\t * \n\t * @param content The content that the newly created node should contain.\n\t * @param previousNode The node that, after this operation, will be situated just before the 'center' node.\n\t * @param nextNode The node that, after this operation, will be situated just after the 'center' node.\n\t * @return The newly created and placed 'center' node.\n\t */\n\tprotected insertBetween(content: E, previousNode: DoublyLinkedListNode<E>, nextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\t// Ensure that the provided nodes are neighbors.\n\t\tif ((previousNode.getNextNode() === nextNode) && (nextNode.getPreviousNode() === previousNode)) {\n\t\t\t\n\t\t\tlet newNode: DoublyLinkedListNode<E> = new DoublyLinkedListNode<E>(content, this, previousNode, nextNode);\n\t\t\tpreviousNode.setNextNode(newNode);\n\t\t\tnextNode.setPreviousNode(newNode);\n\t\t\t\n\t\t\treturn newNode;\n\t\t\t\n\t\t} else throw new Error(\"Attempted to insert new content between two non-adjacent DoublyLinkedNodes.\");\n\t\t\n\t}\n\t\n\t/**\n\t * Inserts the provided node between some specified preceding and successive nodes, returning the middle node.\n\t * \n\t * Note that this method will throw an error if, prior to this method's operation, the specified preceding and\n\t * successive nodes are not adjacent, or if the provided 'center' node already has sibling nodes.\n\t * \n\t * @param centerNode The node that, after this operation, will be situated between the preceding and successive\n\t * nodes.\n\t * @param previousNode The node that, after this operation, will be situated just before the 'center' node.\n\t * @param nextNode The node that, after this operation, will be situated just after the 'center' node.\n\t * @return The newly placed 'center' node.\n\t */\n\tprotected insertNodeBetween(centerNode: DoublyLinkedListNode<E>,\n\t\t\t\t\t\t\t\tpreviousNode: DoublyLinkedListNode<E>,\n\t\t\t\t\t\t\t\tnextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\t// Ensure that the provided nodes are neighbors.\n\t\tif ((previousNode.getNextNode() === nextNode) && (nextNode.getPreviousNode() === previousNode)) {\n\t\t\t\n\t\t\tif (centerNode.hasPreviousNode() || centerNode.hasNextNode()) {\n\t\t\t\t\n\t\t\t\tthrow new Error(\"ERR | Attempted to insert an already-located node (a node with either a preceding or\" +\n\t\t\t\t\t\" successive sibling) into a DoublyLinkedList.\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcenterNode.setPreviousNode(previousNode);\n\t\t\t\tcenterNode.setNextNode(nextNode);\n\t\t\t\t\n\t\t\t\tpreviousNode.setNextNode(centerNode);\n\t\t\t\tnextNode.setPreviousNode(centerNode);\n\t\t\t\t\n\t\t\t\treturn centerNode;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else throw new Error(\"Attempted to insert new content between two non-adjacent DoublyLinkedNodes.\");\n\t\t\n\t}\n\t\n\tpublic getFirst(): E | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return (this.getFirstNode() as DoublyLinkedListNode<E>).getElement();\n\t\t\n\t}\n\t\n\tpublic getFirstNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\treturn this.getPrologueNode().getNextNode();\n\t\t\n\t}\n\t\n\tpublic getLast(): E | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return (this.getLastNode() as DoublyLinkedListNode<E>).getElement();\n\t\t\n\t}\n\t\n\tpublic getLastNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return this.getEpilogueNode().getPreviousNode();\n\t\t\n\t}\n\t\n\tpublic hasNextNode(node: DoublyLinkedListNode<E>): boolean {\n\t\t\n\t\tif (node.getParentList() === this) {\n\t\t\t\n\t\t\tif (this.isEmpty()) return false;\n\t\t\telse return ((node !== this.getLastNode()) && (node !== this.getEpilogueNode()));\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to check the successive node of a DoublyLinkedListNode that did not appear \" +\n\t\t\t\t\"in the given DoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic getNextNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (!this.hasNextNode(node)) return undefined;\n\t\telse return node.getNextNode();\n\t\t\n\t}\n\t\n\tpublic hasPreviousNode(node: DoublyLinkedListNode<E>): boolean {\n\t\t\n\t\tif (node.getParentList() === this) {\n\t\t\t\n\t\t\tif (this.isEmpty()) return false;\n\t\t\telse return ((node !== this.getFirstNode()) && (node !== this.getPrologueNode()));\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to check the successive node of a DoublyLinkedListNode that did not appear in \" +\n\t\t\t\t\"the given DoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic getPreviousNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (!this.hasPreviousNode(node)) return undefined;\n\t\telse return node.getPreviousNode();\n\t\t\n\t}\n\t\n\tpublic insertAfter(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element after a node that does not occur in this \" +\n\t\t\t\t\"DoublyLinkedList.\");\n\t\t\t\n\t\t} else if (node === this.getEpilogueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element after the prologue node of a DoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertBetween(element, node, node.getNextNode() as DoublyLinkedListNode<E>);\n\t\t\n\t}\n\t\n\tpublic insertNodeAfter(node: DoublyLinkedListNode<E>, afterNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (afterNode.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node after a node that does not occur in this \" +\n\t\t\t\t\"DoublyLinkedList.\");\n\t\t\t\n\t\t} else if (afterNode === this.getPrologueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node after the prologue node of a DoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertNodeBetween(node, afterNode, afterNode.getNextNode() as DoublyLinkedListNode<E>);\n\t\t\n\t}\n\t\n\tpublic insertBefore(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element before a node that does not occur in this \" +\n\t\t\t\t\"DoublyLinkedList.\");\n\t\t\t\n\t\t} else if (node === this.getPrologueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element before the epilogue node of a DoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertBetween(element, node.getPreviousNode() as DoublyLinkedListNode<E>, node);\n\t\t\n\t}\n\t\n\tpublic insertNodeBefore(node: DoublyLinkedListNode<E>, beforeNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (beforeNode.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node before a node that does not occur in this \" +\n\t\t\t\t\"DoublyLinkedList.\");\n\t\t\t\n\t\t} else if (beforeNode === this.getEpilogueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node before the epilogue node of a DoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertNodeBetween(node, beforeNode.getPreviousNode() as DoublyLinkedListNode<E>, beforeNode);\n\t\t\n\t}\n\t\n\tpublic insertFirst(element: E): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertAfter(element, this.getPrologueNode());\n\t\t\n\t}\n\t\n\tpublic insertNodeFirst(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertNodeAfter(node, this.getPrologueNode());\n\t\t\n\t}\n\t\n\tpublic insertLast(element: E): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertBefore(element, this.getEpilogueNode());\n\t\t\n\t}\n\t\n\tpublic insertNodeLast(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertNodeBefore(node, this.getEpilogueNode());\n\t\t\n\t}\n\t\n\tpublic removeFirst(): E | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return (this.removeFirstNode() as DoublyLinkedListNode<E>).getElement();\n\t\t\n\t}\n\t\n\tpublic removeFirstNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return this.removeNode(this.getFirstNode() as DoublyLinkedListNode<E>);\n\t\t\n\t}\n\t\n\tpublic removeLast(): E | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return (this.removeLastNode() as DoublyLinkedListNode<E>).getElement();\n\t\t\n\t}\n\t\n\tpublic removeLastNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (this.isEmpty()) return undefined;\n\t\telse return this.removeNode(this.getLastNode() as DoublyLinkedListNode<E>);\n\t\t\n\t}\n\t\n\tpublic removeNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to remove a DoublyLinkedListNode that did not appear in the given \" +\n\t\t\t\t\"DoublyLinkedList.\");\n\t\t\t\n\t\t} else if (!node.hasPreviousNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"ERR | Attempted to remove a DoublyLinkedListNode without a preceding node - most likely \" +\n\t\t\t\t\"the prologue node!\");\n\t\t\t\n\t\t} else if (!node.hasNextNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"ERR | Attempted to remove a DoublyLinkedListNode without a successive node - most \" +\n\t\t\t\t\"likely the epilogue node!\");\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tlet displaced: DoublyLinkedListNode<E> = node;\n\t\t\t\n\t\t\t(node.getPreviousNode() as DoublyLinkedListNode<E>).setNextNode(node.getNextNode());\n\t\t\t(node.getNextNode() as DoublyLinkedListNode<E>).setPreviousNode(node.getPreviousNode());\n\t\t\t\n\t\t\tnode.setPreviousNode(undefined);\n\t\t\tnode.setNextNode(undefined);\n\t\t\t\n\t\t\treturn displaced;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Creates a new node with the provided content and inserts it at the end of the list, returning the newly created node.\n\t * \n\t * Note that this is an alias method for {@link DoublyLinkedList#insertLast}.\n\t * \n\t * @param element The content that the newly created node should contain.\n\t * @return The newly created node.\n\t * @see DoublyLinkedList#insertLast\n\t */\n\tpublic add(element: E): void {\n\t\t\n\t\tthis.insertLast(element);\n\t\t\n\t}\n\t\n\t/**\n\t * Attempts to retrieve the element at the provided index in this list, returning undefined if the provided index is\n\t * out-of-bounds.\n\t * \n\t * @param index The index at which to attempt to retrieve an element from this list.\n\t * @return The element in this list at the specified index, or undefined if the provided index is out-of-bounds.\n\t */\n\tpublic get(index: number): E | undefined {\n\t\t\n\t\tif (index < 0) return undefined;\n\t\t\n\t\tlet iterator: AbstractIterator<E> = this.iterator();\n\t\t\n\t\tfor (let i: number = 0; i < index; i++) {\n\t\t\t\n\t\t\tif (iterator.hasNext()) iterator.next();\n\t\t\telse return undefined;\n\t\t\t\n\t\t}\n\t\t\n\t\tif (iterator.hasNext()) return iterator.next() as E;\n\t\telse return undefined;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the number of elements in this list.\n\t *\n\t * @return The number of elements in this list.\n\t */\n\tpublic size(): number {\n\t\t\n\t\tlet size: number = 0;\n\t\t\n\t\tthis.nodeIterator().forEachRemaining(() => size++);\n\t\t\n\t\treturn size;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if this list contains the specified search element.\n\t * \n\t * @param searchElement The element to search this list for.\n\t * @return true if this list contains the specified search element.\n\t */\n\tpublic contains(searchElement: E): boolean {\n\t\t\n\t\tfor (let element of this.iterator()) if (element === searchElement) return true;\n\t\t\n\t\treturn false;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if this list contains no items.\n\t *\n\t * @return true if this list contains no items.\n\t * @see DoublyLinkedList#size\n\t */\n\tpublic isEmpty(): boolean {\n\t\t\n\t\treturn (this.getPrologueNode().getNextNode() === this.getEpilogueNode());\n\t\t\n\t}\n\t\n\t/**\n\t * Removes the specified element from this list, returning the removed element or undefined if no such element was\n\t * present in the list.\n\t * \n\t * Note that this method only removes the first instance occurring in this list (when traversing the list from\n\t * beginning to end), and does NOT remove all instances of the provided element.\n\t * \n\t * @param element The element to remove from this list.\n\t * @return The removed element or undefined if no such element was present in the list.\n\t */\n\tpublic remove(element: E): E | undefined {\n\t\t\n\t\tfor (let node of this.nodeIterator()) {\n\t\t\t\n\t\t\tif (node.getElement() === element) {\n\t\t\t\t\n\t\t\t\tthis.removeNode(node);\n\t\t\t\treturn node.getElement();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn undefined;\n\t\t\n\t}\n\t\n\t/**\n\t * Removes all elements from this list, rendering the list empty.\n\t */\n\tpublic clear(): void {\n\t\t\n\t\tthis.prologue.setNextNode(this.epilogue);\n\t\tthis.epilogue.setPreviousNode(this.prologue);\n\t\t\n\t}\n\t\n\tpublic nodeIterator(): AbstractIterator<DoublyLinkedListNode<E>> {\n\t\t\n\t\treturn new class extends AbstractIterator<DoublyLinkedListNode<E>> {\n\t\n\t\t\tprivate firstNode: DoublyLinkedListNode<E>;\n\t\t\t\n\t\t\tprivate currentNode: DoublyLinkedListNode<E>;\n\t\n\t\t\tprivate dll: DoublyLinkedList<E>;\n\t\n\t\t\tpublic constructor(prologue: DoublyLinkedListNode<E>, dll: DoublyLinkedList<E>) {\n\t\n\t\t\t\tsuper();\n\t\t\t\t\n\t\t\t\tthis.firstNode = prologue;\n\t\t\t\tthis.currentNode = prologue;\n\t\t\t\tthis.dll = dll;\n\t\n\t\t\t}\n\t\n\t\t\tpublic hasNext(): boolean {\n\t\n\t\t\t\treturn this.dll.hasNextNode(this.currentNode);\n\t\n\t\t\t}\n\t\n\t\t\tpublic next(): DoublyLinkedListNode<E> {\n\t\n\t\t\t\treturn (this.currentNode = this.currentNode.getNextNode() as DoublyLinkedListNode<E>);\n\t\n\t\t\t}\n\t\n\t\t\tpublic remove(): DoublyLinkedListNode<E> {\n\t\n\t\t\t\tlet removedNode: DoublyLinkedListNode<E> = this.currentNode;\n\t\n\t\t\t\tthis.dll.removeNode(this.currentNode);\n\t\n\t\t\t\treturn removedNode;\n\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic reset(): void {\n\t\t\t\t\n\t\t\t\tthis.currentNode = this.firstNode;\n\t\t\t\t\n\t\t\t}\n\t\n\t\t}(this.prologue, this);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns an iterator over the elements of this list.\n\t *\n\t * @return An iterator over the elements of this list.\n\t */\n\tpublic iterator(): AbstractIterator<E> {\n\t\t\n\t\treturn new class extends AbstractIterator<E> {\n\t\t\t\n\t\t\tprivate nodeIterator: AbstractIterator<DoublyLinkedListNode<E>>;\n\t\t\t\n\t\t\tpublic constructor(nodeIterator: AbstractIterator<DoublyLinkedListNode<E>>) {\n\t\t\t\t\n\t\t\t\tsuper();\n\t\t\t\t\n\t\t\t\tthis.nodeIterator = nodeIterator;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic hasNext(): boolean {\n\t\t\t\t\n\t\t\t\treturn this.nodeIterator.hasNext();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): E | undefined {\n\t\t\t\t\n\t\t\t\treturn (this.nodeIterator.next() as DoublyLinkedListNode<E>).getElement();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}(this.nodeIterator());\n\t\t\n\t}\n\t\n\t/**\n\t * Randomizes the order of the elements in the list.\n\t * \n\t * @param iterations The number of times that the list should be shuffled.\n\t */\n\tpublic shuffle(iterations: number = 1): void {\n\t\t\n\t\tfor (let count: number = 0; count < iterations; count++) {\n\t\t\t\n\t\t\tlet elements: E[] = this.toArray();\n\t\t\tthis.clear();\n\t\t\t\n\t\t\twhile (elements.length !== 0) {\n\t\t\t\t\n\t\t\t\tlet random: number = Math.floor(Math.random() * elements.length);\n\t\t\t\tlet element: E = elements.splice(random, 1)[0];\n\t\t\t\tthis.add(element);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Returns this list represented as an array of its elements.\n\t *\n\t * @return This list represented as an array of its elements.\n\t */\n\tpublic toArray(): E[] {\n\t\t\n\t\tlet result: E[] = [];\n\t\t\n\t\tthis.iterator().forEachRemaining((element: E): any => result.push(element));\n\t\t\n\t\treturn result;\n\t\t\n\t}\n\t\n}"]}