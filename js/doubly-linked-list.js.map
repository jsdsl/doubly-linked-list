{"version":3,"sources":["../ts/doubly-linked-list.ts"],"names":["abstract_list_1","require","doubly_linked_list_node_1","iter_over_1","DoublyLinkedList","AbstractList","[object Object]","elements","super","this","prologue","DoublyLinkedListNode","undefined","epilogue","setNextNode","addAll","content","previousNode","nextNode","getNextNode","getPreviousNode","newNode","setPreviousNode","Error","node","hasPreviousNode","hasNextNode","getFirstNode","getElement","isEmpty","getPrologueNode","getLastNode","getEpilogueNode","getParentList","element","insertBetween","afterNode","insertNodeBetween","beforeNode","insertAfter","insertNodeAfter","insertBefore","insertNodeBefore","removeFirstNode","removeNode","removeLastNode","displaced","insertLast","index","RangeError","iterator","i","hasNext","next","size","nodeIterator","forEachRemaining","searchElement","AbstractIterator","dll","firstNode","currentNode","removedNode","iterations","count","toArray","clear","length","random","Math","floor","splice","add","result","push","exports"],"mappings":"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","file":"doubly-linked-list.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:54 PM -- March 14th, 2019.\n *\tProject: @jsdsl/doubly-linked-list\n */\n\nimport { AbstractList } from \"@jsdsl/abstract-list\";\nimport { DoublyLinkedListNode } from \"./doubly-linked-list-node\";\nimport { AbstractIterator } from \"iter-over\";\n\n/**\n * A list-type data structure consisting of an ordered collection of nodes that rely on node-to-node linkages to\n * maintain the internal structure of the list.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class DoublyLinkedList<E = any> extends AbstractList<E> {\n\t\n\tprivate prologue: DoublyLinkedListNode<E>;\n\t\n\tprivate epilogue: DoublyLinkedListNode<E>;\n\t\n\tpublic constructor(...elements: E[]) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.prologue = new DoublyLinkedListNode<E>(null, this, undefined, undefined);\n\t\tthis.epilogue = new DoublyLinkedListNode<E>(null, this, this.prologue, undefined);\n\t\tthis.prologue.setNextNode(this.epilogue);\n\t\t\n\t\tthis.addAll(elements);\n\t\n\t}\n\t\n\tprotected getEpilogueNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.epilogue;\n\t\t\n\t}\n\t\n\tprotected getPrologueNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.prologue;\n\t\t\n\t}\n\t\n\tprotected insertBetween(content: E, previousNode: DoublyLinkedListNode<E>, nextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\t// Ensure that the provided nodes are neighbors.\n\t\tif ((previousNode.getNextNode() === nextNode) && (nextNode.getPreviousNode() === previousNode)) {\n\t\t\t\n\t\t\tlet newNode: DoublyLinkedListNode<E> = new DoublyLinkedListNode<E>(content, this, previousNode, nextNode);\n\t\t\tpreviousNode.setNextNode(newNode);\n\t\t\tnextNode.setPreviousNode(newNode);\n\t\t\t\n\t\t\treturn newNode;\n\t\t\t\n\t\t} else throw new Error(\"Attempted to insert new content between two non-adjacent DoublyLinkedNodes.\");\n\t\t\n\t}\n\t\n\tprotected insertNodeBetween(node: DoublyLinkedListNode<E>,\n\t\t\t\t\t\t\t\tpreviousNode: DoublyLinkedListNode<E>,\n\t\t\t\t\t\t\t\tnextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\t// Ensure that the provided nodes are neighbors.\n\t\tif ((previousNode.getNextNode() === nextNode) && (nextNode.getPreviousNode() === previousNode)) {\n\t\t\t\n\t\t\tif (node.hasPreviousNode() || node.hasNextNode()) {\n\t\t\t\t\n\t\t\t\tthrow new Error(\"ERR | Attempted to insert an already-located node (a node with either a prior or \" +\n\t\t\t\t\t\"successive sibling) into a DoublyLinkedList.\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tnode.setPreviousNode(previousNode);\n\t\t\t\tnode.setNextNode(nextNode);\n\t\t\t\t\n\t\t\t\tpreviousNode.setNextNode(node);\n\t\t\t\tnextNode.setPreviousNode(node);\n\t\t\t\t\n\t\t\t\treturn node;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else throw new Error(\"Attempted to insert new content between two non-adjacent DoublyLinkedNodes.\");\n\t\t\n\t}\n\t\n\tpublic getFirst(): E {\n\t\t\n\t\treturn this.getFirstNode().getElement();\n\t\t\n\t}\n\t\n\tpublic getFirstNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.isEmpty()) throw new Error(\"Attempted to access the first node of an empty TSADoublyLinkedList\");\n\t\telse return this.getPrologueNode().getNextNode();\n\t\t\n\t}\n\t\n\tpublic getLast(): E {\n\t\t\n\t\treturn this.getLastNode().getElement();\n\t\t\n\t}\n\t\n\tpublic getLastNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.isEmpty()) throw new Error(\"Attempted to access the last node of an empty TSADoublyLinkedList\");\n\t\telse return this.getEpilogueNode().getPreviousNode();\n\t\t\n\t}\n\t\n\tpublic hasNextNode(node: DoublyLinkedListNode<E>): boolean {\n\t\t\n\t\tif (node.getParentList() === this) {\n\t\t\t\n\t\t\tif (this.isEmpty()) return false;\n\t\t\telse return ((node !== this.getLastNode()) && (node !== this.getEpilogueNode()));\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to check the next node of a TSADoublyLinkedListNode that did not appear in the\" +\n\t\t\t\t\" given TSADoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic getNextNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.hasNextNode(node)) return node.getNextNode();\n\t\telse throw new Error(\"Attempted to get the next node of a node that did not have a succeeding sibling.\");\n\t\t\n\t}\n\t\n\tpublic hasPreviousNode(node: DoublyLinkedListNode<E>): boolean {\n\t\t\n\t\tif (node.getParentList() === this) {\n\t\t\t\n\t\t\tif (this.isEmpty()) return false;\n\t\t\telse return ((node !== this.getFirstNode()) && (node !== this.getPrologueNode()));\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to check the next node of a TSADoublyLinkedListNode that did not appear in the\" +\n\t\t\t\t\" given TSADoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic getPreviousNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.hasPreviousNode(node)) return node.getPreviousNode();\n\t\telse throw new Error(\"Attempted to get the previous node of a node that did not have a preceding sibling.\");\n\t\t\n\t}\n\t\n\tpublic insertAfter(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element after a node that does not occur in this \" +\n\t\t\t\t\"TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else if (node === this.getEpilogueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element after the prologue node of a TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertBetween(element, node, node.getNextNode());\n\t\t\n\t}\n\t\n\tpublic insertNodeAfter(node: DoublyLinkedListNode<E>, afterNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (afterNode.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node after a node that does not occur in this \" +\n\t\t\t\t\"TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else if (afterNode === this.getPrologueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node after the prologue node of a TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertNodeBetween(node, afterNode, afterNode.getNextNode());\n\t\t\n\t}\n\t\n\tpublic insertBefore(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element before a node that does not occur in this \" +\n\t\t\t\t\"TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else if (node === this.getPrologueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert an element before the epilogue node of a TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertBetween(element, node.getPreviousNode(), node);\n\t\t\n\t}\n\t\n\tpublic insertNodeBefore(node: DoublyLinkedListNode<E>, beforeNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (beforeNode.getParentList() !== this) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node before a node that does not occur in this \" +\n\t\t\t\t\"TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else if (beforeNode === this.getEpilogueNode()) {\n\t\t\t\n\t\t\tthrow new Error(\"Attempted to insert a node before the epilogue node of a TSADoublyLinkedList.\");\n\t\t\t\n\t\t} else return this.insertNodeBetween(node, beforeNode.getPreviousNode(), beforeNode);\n\t\t\n\t}\n\t\n\tpublic insertFirst(element: E): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertAfter(element, this.getPrologueNode());\n\t\t\n\t}\n\t\n\tpublic insertNodeFirst(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertNodeAfter(node, this.getPrologueNode());\n\t\t\n\t}\n\t\n\tpublic insertLast(element: E): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertBefore(element, this.getEpilogueNode());\n\t\t\n\t}\n\t\n\tpublic insertNodeLast(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\treturn this.insertNodeBefore(node, this.getEpilogueNode());\n\t\t\n\t}\n\t\n\tpublic removeFirst(): E {\n\t\t\n\t\treturn this.removeFirstNode().getElement();\n\t\t\n\t}\n\t\n\tpublic removeFirstNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.isEmpty()) throw new Error(\"Attempted to remove the first node of an empty TSADoublyLinkedList.\");\n\t\telse return this.removeNode(this.getFirstNode());\n\t\t\n\t}\n\t\n\tpublic removeLast(): E {\n\t\t\n\t\treturn this.removeLastNode().getElement();\n\t\t\n\t}\n\t\n\tpublic removeLastNode(): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (this.isEmpty()) throw new Error(\"Attempted to remove the last node of an empty TSADoublyLinkedList.\");\n\t\telse return this.removeNode(this.getLastNode());\n\t\t\n\t}\n\t\n\tpublic removeNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E> {\n\t\t\n\t\tif (node.getParentList() === this) {\n\t\t\t\n\t\t\tlet displaced: DoublyLinkedListNode<E> = node;\n\t\t\t\n\t\t\tnode.getPreviousNode().setNextNode(node.getNextNode());\n\t\t\tnode.getNextNode().setPreviousNode(node.getPreviousNode());\n\t\t\t\n\t\t\tnode.setPreviousNode(undefined);\n\t\t\tnode.setNextNode(undefined);\n\t\t\t\n\t\t\treturn displaced;\n\t\t\t\n\t\t} else throw new Error(\"Attempted to remove a DoublyLinkedListNode that did not appear in the given DoublyLinkedList.\");\n\t\t\n\t}\n\t\n\tpublic add(element: E): void {\n\t\t\n\t\tthis.insertLast(element);\n\t\t\n\t}\n\t\n\tpublic get(index: number): E {\n\t\t\n\t\tif (index < 0) {\n\t\t\t\n\t\t\tthrow new RangeError(\"ERR | Attempted to retrieve an out-of-bounds index out of a DoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t\tlet iterator: AbstractIterator<E> = this.iterator();\n\t\t\n\t\tfor (let i: number = 0; i < index; i++) {\n\t\t\t\n\t\t\tif (iterator.hasNext()) iterator.next();\n\t\t\telse throw new RangeError(\"ERR | Attempted to retrieve an out-of-bounds index out of a DoublyLinkedList.\");\n\t\t\t\n\t\t}\n\t\t\n\t\tif (iterator.hasNext()) return iterator.next() as E;\n\t\telse throw new RangeError(\"ERR | Attempted to retrieve an out-of-bounds index out of a DoublyLinkedList.\");\n\t\t\n\t}\n\t\n\tpublic size(): number {\n\t\t\n\t\tlet size: number = 0;\n\t\t\n\t\tthis.nodeIterator().forEachRemaining(() => size++);\n\t\t\n\t\treturn size;\n\t\t\n\t}\n\t\n\tpublic contains(searchElement: E): boolean {\n\t\t\n\t\tfor (let element of this.iterator()) if (element === searchElement) return true;\n\t\t\n\t\treturn false;\n\t\t\n\t}\n\t\n\tpublic isEmpty(): boolean {\n\t\t\n\t\treturn (this.getPrologueNode().getNextNode() === this.getEpilogueNode());\n\t\t\n\t}\n\t\n\tpublic remove(element: E): E {\n\t\t\n\t\tfor (let node of this.nodeIterator()) {\n\t\t\t\n\t\t\tif (node.getElement() === element) {\n\t\t\t\t\n\t\t\t\tthis.removeNode(node);\n\t\t\t\treturn node.getElement();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tthrow new Error(\"ERR | Attempted to remove an element from this DoublyLinkedList that did not exist.\");\n\t\t\n\t}\n\t\n\tpublic clear(): void {\n\t\t\n\t\tthis.prologue.setNextNode(this.epilogue);\n\t\tthis.epilogue.setPreviousNode(this.prologue);\n\t\t\n\t}\n\t\n\tpublic nodeIterator(): AbstractIterator<DoublyLinkedListNode<E>> {\n\t\t\n\t\treturn new class extends AbstractIterator<DoublyLinkedListNode<E>> {\n\n\t\t\tprivate firstNode: DoublyLinkedListNode<E>;\n\t\t\t\n\t\t\tprivate currentNode: DoublyLinkedListNode<E>;\n\n\t\t\tprivate dll: DoublyLinkedList<E>;\n\n\t\t\tpublic constructor(prologue: DoublyLinkedListNode<E>, dll: DoublyLinkedList<E>) {\n\n\t\t\t\tsuper();\n\t\t\t\t\n\t\t\t\tthis.firstNode = prologue;\n\t\t\t\tthis.currentNode = prologue;\n\t\t\t\tthis.dll = dll;\n\n\t\t\t}\n\n\t\t\tpublic hasNext(): boolean {\n\n\t\t\t\treturn this.dll.hasNextNode(this.currentNode);\n\n\t\t\t}\n\n\t\t\tpublic next(): DoublyLinkedListNode<E> {\n\n\t\t\t\treturn (this.currentNode = this.currentNode.getNextNode());\n\n\t\t\t}\n\n\t\t\tpublic remove(): DoublyLinkedListNode<E> {\n\n\t\t\t\tlet removedNode: DoublyLinkedListNode<E> = this.currentNode;\n\n\t\t\t\tthis.dll.removeNode(this.currentNode);\n\n\t\t\t\treturn removedNode;\n\n\t\t\t}\n\t\t\t\n\t\t\tpublic reset(): void {\n\t\t\t\t\n\t\t\t\tthis.currentNode = this.firstNode;\n\t\t\t\t\n\t\t\t}\n\n\t\t}(this.prologue, this);\n\t\t\n\t}\n\t\n\tpublic iterator(): AbstractIterator<E> {\n\t\t\n\t\treturn new class extends AbstractIterator<E> {\n\t\t\t\n\t\t\tprivate nodeIterator: AbstractIterator<DoublyLinkedListNode<E>>;\n\t\t\t\n\t\t\tpublic constructor(nodeIterator: AbstractIterator<DoublyLinkedListNode<E>>) {\n\t\t\t\t\n\t\t\t\tsuper();\n\t\t\t\t\n\t\t\t\tthis.nodeIterator = nodeIterator;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic hasNext(): boolean {\n\t\t\t\t\n\t\t\t\treturn this.nodeIterator.hasNext();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpublic next(): E | undefined {\n\t\t\t\t\n\t\t\t\treturn (this.nodeIterator.next() as DoublyLinkedListNode<E>).getElement();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}(this.nodeIterator());\n\t\t\n\t}\n\t\n\tpublic shuffle(iterations: number = 1): void {\n\t\t\n\t\tfor (let count: number = 0; count < iterations; count++) {\n\t\t\t\n\t\t\tlet elements: E[] = this.toArray();\n\t\t\tthis.clear();\n\t\t\t\n\t\t\twhile (elements.length !== 0) {\n\t\t\t\t\n\t\t\t\tlet random: number = Math.floor(Math.random() * elements.length);\n\t\t\t\tlet element: E = elements.splice(random, 1)[0];\n\t\t\t\tthis.add(element);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic toArray(): E[] {\n\t\t\n\t\tlet result: E[] = [];\n\t\t\n\t\tthis.iterator().forEachRemaining((element: E): any => result.push(element));\n\t\t\n\t\treturn result;\n\t\t\n\t}\n\t\n}"]}