"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const abstract_list_1=require("@jsdsl/abstract-list"),doubly_linked_list_node_1=require("./doubly-linked-list-node"),iter_over_1=require("iter-over");class DoublyLinkedList extends abstract_list_1.AbstractList{constructor(...e){super(),this.prologue=new doubly_linked_list_node_1.DoublyLinkedListNode(null,this,void 0,void 0),this.epilogue=new doubly_linked_list_node_1.DoublyLinkedListNode(null,this,this.prologue,void 0),this.prologue.setNextNode(this.epilogue),this.addAll(e)}getEpilogueNode(){return this.epilogue}getPrologueNode(){return this.prologue}insertBetween(e,t,o){if(t.getNextNode()===o&&o.getPreviousNode()===t){let r=new doubly_linked_list_node_1.DoublyLinkedListNode(e,this,t,o);return t.setNextNode(r),o.setPreviousNode(r),r}throw new Error("Attempted to insert new content between two non-adjacent DoublyLinkedNodes.")}insertNodeBetween(e,t,o){if(t.getNextNode()===o&&o.getPreviousNode()===t){if(e.hasPreviousNode()||e.hasNextNode())throw new Error("ERR | Attempted to insert an already-located node (a node with either a preceding or successive sibling) into a DoublyLinkedList.");return e.setPreviousNode(t),e.setNextNode(o),t.setNextNode(e),o.setPreviousNode(e),e}throw new Error("Attempted to insert new content between two non-adjacent DoublyLinkedNodes.")}getFirst(){return this.isEmpty()?void 0:this.getFirstNode().getElement()}getFirstNode(){return this.getPrologueNode().getNextNode()}getLast(){return this.isEmpty()?void 0:this.getLastNode().getElement()}getLastNode(){return this.isEmpty()?void 0:this.getEpilogueNode().getPreviousNode()}hasNextNode(e){if(e.getParentList()===this)return!this.isEmpty()&&(e!==this.getLastNode()&&e!==this.getEpilogueNode());throw new Error("Attempted to check the successive node of a DoublyLinkedListNode that did not appear in the given DoublyLinkedList.")}getNextNode(e){return this.hasNextNode(e)?e.getNextNode():void 0}hasPreviousNode(e){if(e.getParentList()===this)return!this.isEmpty()&&(e!==this.getFirstNode()&&e!==this.getPrologueNode());throw new Error("Attempted to check the successive node of a DoublyLinkedListNode that did not appear in the given DoublyLinkedList.")}getPreviousNode(e){return this.hasPreviousNode(e)?e.getPreviousNode():void 0}insertAfter(e,t){if(t.getParentList()!==this)throw new Error("Attempted to insert an element after a node that does not occur in this DoublyLinkedList.");if(t===this.getEpilogueNode())throw new Error("Attempted to insert an element after the prologue node of a DoublyLinkedList.");return this.insertBetween(e,t,t.getNextNode())}insertNodeAfter(e,t){if(t.getParentList()!==this)throw new Error("Attempted to insert a node after a node that does not occur in this DoublyLinkedList.");if(t===this.getPrologueNode())throw new Error("Attempted to insert a node after the prologue node of a DoublyLinkedList.");return this.insertNodeBetween(e,t,t.getNextNode())}insertBefore(e,t){if(t.getParentList()!==this)throw new Error("Attempted to insert an element before a node that does not occur in this DoublyLinkedList.");if(t===this.getPrologueNode())throw new Error("Attempted to insert an element before the epilogue node of a DoublyLinkedList.");return this.insertBetween(e,t.getPreviousNode(),t)}insertNodeBefore(e,t){if(t.getParentList()!==this)throw new Error("Attempted to insert a node before a node that does not occur in this DoublyLinkedList.");if(t===this.getEpilogueNode())throw new Error("Attempted to insert a node before the epilogue node of a DoublyLinkedList.");return this.insertNodeBetween(e,t.getPreviousNode(),t)}insertFirst(e){return this.insertAfter(e,this.getPrologueNode())}insertNodeFirst(e){return this.insertNodeAfter(e,this.getPrologueNode())}insertLast(e){return this.insertBefore(e,this.getEpilogueNode())}insertNodeLast(e){return this.insertNodeBefore(e,this.getEpilogueNode())}removeFirst(){return this.isEmpty()?void 0:this.removeFirstNode().getElement()}removeFirstNode(){return this.isEmpty()?void 0:this.removeNode(this.getFirstNode())}removeLast(){return this.isEmpty()?void 0:this.removeLastNode().getElement()}removeLastNode(){return this.isEmpty()?void 0:this.removeNode(this.getLastNode())}removeNode(e){if(e.getParentList()!==this)throw new Error("Attempted to remove a DoublyLinkedListNode that did not appear in the given DoublyLinkedList.");if(e.hasPreviousNode()){if(e.hasNextNode()){let t=e;return e.getPreviousNode().setNextNode(e.getNextNode()),e.getNextNode().setPreviousNode(e.getPreviousNode()),e.setPreviousNode(void 0),e.setNextNode(void 0),t}throw new Error("ERR | Attempted to remove a DoublyLinkedListNode without a successive node - most likely the epilogue node!")}throw new Error("ERR | Attempted to remove a DoublyLinkedListNode without a preceding node - most likely the prologue node!")}add(e){this.insertLast(e)}get(e){if(e<0)return;let t=this.iterator();for(let o=0;o<e;o++){if(!t.hasNext())return;t.next()}return t.hasNext()?t.next():void 0}size(){let e=0;return this.nodeIterator().forEachRemaining(()=>e++),e}contains(e){for(let t of this.iterator())if(t===e)return!0;return!1}isEmpty(){return this.getPrologueNode().getNextNode()===this.getEpilogueNode()}remove(e){for(let t of this.nodeIterator())if(t.getElement()===e)return this.removeNode(t),t.getElement()}clear(){this.prologue.setNextNode(this.epilogue),this.epilogue.setPreviousNode(this.prologue)}nodeIterator(){return new class extends iter_over_1.AbstractIterator{constructor(e,t){super(),this.firstNode=e,this.currentNode=e,this.dll=t}hasNext(){return this.dll.hasNextNode(this.currentNode)}next(){return this.currentNode=this.currentNode.getNextNode()}remove(){let e=this.currentNode;return this.dll.removeNode(this.currentNode),e}reset(){this.currentNode=this.firstNode}}(this.prologue,this)}iterator(){return new class extends iter_over_1.AbstractIterator{constructor(e){super(),this.nodeIterator=e}hasNext(){return this.nodeIterator.hasNext()}next(){return this.nodeIterator.next().getElement()}}(this.nodeIterator())}shuffle(e=1){for(let t=0;t<e;t++){let e=this.toArray();for(this.clear();0!==e.length;){let t=Math.floor(Math.random()*e.length),o=e.splice(t,1)[0];this.add(o)}}}toArray(){let e=[];return this.iterator().forEachRemaining(t=>e.push(t)),e}}exports.DoublyLinkedList=DoublyLinkedList;
//# sourceMappingURL=doubly-linked-list.js.map
