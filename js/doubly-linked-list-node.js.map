{"version":3,"sources":["../ts/doubly-linked-list-node.ts"],"names":["DoublyLinkedListNode","[object Object]","content","parentList","previousNode","nextNode","this","previous","next","name","hasPreviousNode","Error","undefined","displaced","hasNextNode","exports"],"mappings":"oEAeA,MAAaA,qBAiCZC,YAAmBC,EAAmBC,EAAiCC,EAChEC,GAENC,KAAKJ,QAAUA,EACfI,KAAKH,WAAaA,EAClBG,KAAKC,SAAWH,EAChBE,KAAKE,KAAOH,EASNJ,aAEN,GAAqB,OAAjBK,KAAKJ,QAAkB,OAAOI,KAAKJ,QAClC,CAEJ,IAAIO,EAAgBH,KAAKI,kBAAoB,WAAa,WAE1D,MAAM,IAAIC,MAAM,2EAA6EF,EAC5F,YAWIR,gBAEN,OAAOK,KAAKH,WASNF,kBAEN,YAA0BW,IAAlBN,KAAKC,SAUPN,kBAEN,OAAKK,KAAKI,kBACEJ,KAAKC,cADY,EAYvBN,gBAAgBG,GAEtB,IAAIS,EAAiDP,KAAKC,SAE1D,OADAD,KAAKC,SAAWH,EACTS,EASDZ,cAEN,YAAsBW,IAAdN,KAAKE,KAUPP,cAEN,OAAKK,KAAKQ,cACER,KAAKE,UADQ,EAWnBP,YAAYI,GAElB,IAAIQ,EAAiDP,KAAKE,KAE1D,OADAF,KAAKE,KAAOH,EACLQ,GAlJTE,QAAAf,qBAAAA","file":"doubly-linked-list-node.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:54 PM -- March 14th, 2019.\n *\tProject: @jsdsl/doubly-linked-list\n */\n\nimport { DoublyLinkedList } from \"./doubly-linked-list\";\n\n/**\n * A doubly-linked node within a {@link DoublyLinkedList}.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.2.0\n * @since v0.1.0\n */\nexport class DoublyLinkedListNode<E> {\n\t\n\t/**\n\t * A reference to the node preceding this node, or undefined if this node has no preceding sibling.\n\t */\n\tprivate previous: DoublyLinkedListNode<E> | undefined;\n\t\n\t/**\n\t * A reference to the node succeeding this node, or undefined if this node has no successive sibling.\n\t */\n\tprivate next: DoublyLinkedListNode<E> | undefined;\n\t\n\t/**\n\t * A reference to the {@link DoublyLinkedList} to which this node belongs.\n\t */\n\tprivate parentList: DoublyLinkedList<E>;\n\t\n\t/**\n\t * The content that this node contains.\n\t * \n\t * This will always be null for the prologue and epilogue nodes in any given {@link DoublyLinkedList}.\n\t */\n\tprivate content: E | null;\n\t\n\t/**\n\t * Initializes a new DoublyLinkedListNode with the provided contents, parent list, and optional preceding and\n\t * successive nodes. \n\t * \n\t * @param content The content to initialize this node with.\n\t * @param parentList The {@link DoublyLinkedList} that contains this node.\n\t * @param previousNode The node that should be set as this node's preceding sibling.\n\t * @param nextNode The node that should be set as this node's successive sibling.\n\t */\n\tpublic constructor(content: E | null, parentList: DoublyLinkedList<E>, previousNode?: DoublyLinkedListNode<E>,\n\t\t\t\t\t   nextNode?: DoublyLinkedListNode<E>) {\n\t\t\n\t\tthis.content = content;\n\t\tthis.parentList = parentList;\n\t\tthis.previous = previousNode;\n\t\tthis.next = nextNode;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the element contained in this node.\n\t * \n\t * @return The element contained in this node.\n\t */\n\tpublic getElement(): E {\n\t\t\n\t\tif (this.content !== null) return this.content;\n\t\telse {\n\t\t\t\n\t\t\tlet name: string = (this.hasPreviousNode() ? \"epilogue\" : \"prologue\");\n\t\t\t\n\t\t\tthrow new Error(\"ERR | Attempted to retrieve null content out of a DoublyLinkedListNode (\" + name +\n\t\t\t\t\" node).\");\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the {@link DoublyLinkedList} that contains this node.\n\t * \n\t * @return The DoublyLinkedList that contains this node.\n\t */\n\tpublic getParentList(): DoublyLinkedList<E> {\n\t\t\n\t\treturn this.parentList;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if this node has a preceding node.\n\t * \n\t * @return true if this node has a preceding node.\n\t */\n\tpublic hasPreviousNode(): boolean {\n\t\t\n\t\treturn (this.previous !== undefined);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns this node's preceding node, or undefined if this node has no preceding sibling.\n\t * \n\t * @return This node's preceding node, or undefined if this node has no preceding sibling.\n\t * @see DoublyLinkedListNode#hasPreviousNode\n\t */\n\tpublic getPreviousNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (!this.hasPreviousNode()) return undefined;\n\t\telse return this.previous as DoublyLinkedListNode<E>;\n\t\t\n\t}\n\t\n\t/**\n\t * Sets the preceding node for this node, returning the node displaced as this node's preceding sibling, or\n\t * undefined if this node had no preceding sibling.\n\t * \n\t * @param previousNode The node to set as this node's preceding sibling.\n\t * @return DOC-ME\n\t */\n\tpublic setPreviousNode(previousNode: DoublyLinkedListNode<E> | undefined): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tlet displaced: DoublyLinkedListNode<E> | undefined = this.previous;\n\t\tthis.previous = previousNode;\n\t\treturn displaced;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if this node has a successive node.\n\t *\n\t * @return true if this node has a successive node.\n\t */\n\tpublic hasNextNode(): boolean {\n\t\t\n\t\treturn (this.next !== undefined);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns this node's succeeding node, or undefined if this node has no successive sibling.\n\t *\n\t * @return This node's succeeding node, or undefined if this node has no successive sibling.\n\t * @see DoublyLinkedListNode#hasNextNode\n\t */\n\tpublic getNextNode(): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tif (!this.hasNextNode()) return undefined;\n\t\telse return this.next as DoublyLinkedListNode<E>;\n\t\t\n\t}\n\t\n\t/**\n\t * Sets the succeeding node for this node, returning the node displaced as this node's succeeding sibling, or\n\t * undefined if this node had no successive sibling.\n\t * \n\t * @param nextNode The node to set as this node's successive sibling.\n\t */\n\tpublic setNextNode(nextNode: DoublyLinkedListNode<E> | undefined): DoublyLinkedListNode<E> | undefined {\n\t\t\n\t\tlet displaced: DoublyLinkedListNode<E> | undefined = this.next;\n\t\tthis.next = nextNode;\n\t\treturn displaced;\n\t\t\n\t}\n\t\n}"]}