import { AbstractList } from "@jsdsl/abstract-list";
import { DoublyLinkedListNode } from "./doubly-linked-list-node";
import { AbstractIterator } from "iter-over";
export declare class DoublyLinkedList<E = any> extends AbstractList<E> {
    private prologue;
    private epilogue;
    constructor(...elements: E[]);
    protected getEpilogueNode(): DoublyLinkedListNode<E>;
    protected getPrologueNode(): DoublyLinkedListNode<E>;
    protected insertBetween(content: E, previousNode: DoublyLinkedListNode<E>, nextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    protected insertNodeBetween(node: DoublyLinkedListNode<E>, previousNode: DoublyLinkedListNode<E>, nextNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    getFirst(): E;
    getFirstNode(): DoublyLinkedListNode<E>;
    getLast(): E;
    getLastNode(): DoublyLinkedListNode<E>;
    hasNextNode(node: DoublyLinkedListNode<E>): boolean;
    getNextNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    hasPreviousNode(node: DoublyLinkedListNode<E>): boolean;
    getPreviousNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertAfter(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertNodeAfter(node: DoublyLinkedListNode<E>, afterNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertBefore(element: E, node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertNodeBefore(node: DoublyLinkedListNode<E>, beforeNode: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertFirst(element: E): DoublyLinkedListNode<E>;
    insertNodeFirst(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    insertLast(element: E): DoublyLinkedListNode<E>;
    insertNodeLast(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    removeFirst(): E;
    removeFirstNode(): DoublyLinkedListNode<E>;
    removeLast(): E;
    removeLastNode(): DoublyLinkedListNode<E>;
    removeNode(node: DoublyLinkedListNode<E>): DoublyLinkedListNode<E>;
    add(element: E): void;
    get(index: number): E;
    size(): number;
    contains(searchElement: E): boolean;
    isEmpty(): boolean;
    remove(element: E): E;
    clear(): void;
    nodeIterator(): AbstractIterator<DoublyLinkedListNode<E>>;
    iterator(): AbstractIterator<E>;
    shuffle(iterations?: number): void;
    toArray(): E[];
}
